services:
  # 1. A PostgreSQL database for your app
  - type: pserv
    name: travel-app-db
    env: postgres

  # 2. A Redis instance for your Celery tasks
  - type: pserv
    name: travel-app-redis
    env: redis

  # 3. Your Django Web Service (runs Gunicorn)
  - type: web
    name: travel-app-web
    env: python
    buildCommand: "./build.sh"
    startCommand: "gunicorn alx_travel_app.wsgi:application"
    envVars:
      - key: DATABASE_URL
        fromService:
          type: pserv
          name: travel-app-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: pserv
          name: travel-app-redis
          property: connectionString
      - key: SECRET_KEY
        generateValue: true # Render will generate a secure secret key for you
      - key: DEBUG
        value: False # Always False in production

  # 4. Your Celery Worker Service
  - type: worker
    name: travel-app-worker
    env: python
    startCommand: "celery -A alx_travel_app worker --loglevel=info"
    envVars:
      - key: DATABASE_URL
        fromService:
          type: pserv
          name: travel-app-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: pserv
          name: travel-app-redis
          property: connectionString
      - key: SECRET_KEY
        fromService: # This ensures the worker uses the same secret key as the web server
          type: web
          name: travel-app-web
          envVarKey: SECRET_KEY
      - key: DEBUG
        value: False
